import React, { useState, useEffect, useRef, useCallback } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { motion } from "framer-motion";
import {
  User,
  Settings,
  LogOut,
  Key,
  Bike,
  Calendar,
  Bell,
  CreditCard,
  MapPin,
  Clock,
  Shield,
  Camera,
  Phone,
  Info,
  BookOpen,
  CreditCard as Subscription,
} from "lucide-react";
import axios from "axios";
import { toast } from "react-toastify";
import { API_CONFIG } from "../config/api.config";
import marketplaceService from "../services/marketplaceService";
import MyBookingsTab from "../components/MyBookingsTab";
import MyServicesTab from "../components/MyServicesTab";
import MySubscriptionsTab from "../components/MySubscriptionsTab";

// Remove Google Maps declarations
interface UserProfile {
  [key: string]: any; // Add index signature to allow string indexing
  id?: number;
  email: string;
  name: string;
  username: string;
  address: string;
  profile_photo: string | null; // Changed from optional to nullable to match reality
  vehicle_name: number | null; // Changed to number for clarity
  vehicle_type: number | null; // Changed to number for clarity
  manufacturer: number | null; // Changed to number for clarity
  memberSince?: string;
  phone?: string;
  preferredLocation?: string;
  latitude?: number;
  longitude?: number;
  city?: string;
  state?: string;
  country?: string;
  postal_code?: string;
  pending?: boolean;
  lastError?: string;
  lastErrorTime?: string;
}

declare interface Manufacturer {
  id: number;
  name: string;
  image: string;
}

declare interface VehicleType {
  id: number;
  name: string;
  image: string;
}

declare interface VehicleModel {
  id: number;
  name: string;
  manufacturer: number;
  manufacturer_name: string;
  vehicle_type: number;
  vehicle_type_name: string;
  image: string | null;
}

// Define RequiredLabel component
const RequiredLabel = ({ text }: { text: string }) => (
  <label className="block text-sm font-medium text-gray-700">
    {text} <span className="text-red-500">*</span>
  </label>
);

const ProfilePage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [activeTab, setActiveTab] = useState<
    "profile" | "services" | "settings" | "bookings" | "subscriptions"
  >("profile");
  const [isEditing, setIsEditing] = useState(false);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [formErrors, setFormErrors] = useState<{ [key: string]: string }>({});
  const [error, setError] = useState<string | null>(null);
  const [refreshKey, setRefreshKey] = useState(0);

  // Vehicle-related state
  const [manufacturers, setManufacturers] = useState<Manufacturer[]>([]);
  const [vehicleTypes, setVehicleTypes] = useState<VehicleType[]>([]);
  const [vehicleModels, setVehicleModels] = useState<VehicleModel[]>([]);
  const [loadingVehicleData, setLoadingVehicleData] = useState(false);
  const [selectedManufacturer, setSelectedManufacturer] = useState<
    number | null
  >(null);
  const [selectedVehicleType, setSelectedVehicleType] = useState<number | null>(
    null,
  );

  // Reference for the location input element
  const locationInputRef = useRef<HTMLInputElement>(null);
  const [locationLoaded, setLocationLoaded] = useState(false);

  // Add a new state for map visibility
  const [showMap, setShowMap] = useState(false);
  const mapContainerRef = useRef<HTMLDivElement>(null);
  const [map, setMap] = useState<any>(null);
  const [marker, setMarker] = useState<any>(null);

  // Add a new state for script loading
  const [scriptLoaded, setScriptLoaded] = useState(false);

  // Add a state to track if Maps API failed to load
  const [mapsApiError, setMapsApiError] = useState(false);

  // Add this state for the file object right after other state declarations
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);

  // Add this state for the save button loading
  const [isSaving, setIsSaving] = useState(false);

  // Add a new state for the vehicle model dropdown
  const [vehicleModelDropdown, setVehicleModelDropdown] = useState<
    VehicleModel[]
  >([]);

  // Add this state for the upload modal right after other state declarations
  // Direct file picker approach instead of modal

  // Add this at the beginning of the component
  console.log("ProfilePage render - Vehicle state:", {
    vehicleModelsLoaded: vehicleModels.length > 0,
    manufacturersLoaded: manufacturers.length > 0,
    vehicleTypesLoaded: vehicleTypes.length > 0,
  });

  // Add this function to handle the vehicle model selection specifically
  const handleVehicleModelChange = (modelId: number | null) => {
    if (!profile) return;
    
    if (modelId) {
      const selectedModel = vehicleModels.find(m => m.id === modelId);
      console.log('Selected model:', selectedModel);
      console.log('Current profile:', profile);
      
      // Validate that the selected model matches both manufacturer and vehicle type
      if (selectedModel) {
        const modelManufacturerId = typeof selectedModel.manufacturer === 'object' 
          ? (selectedModel.manufacturer as {id: number}).id 
          : selectedModel.manufacturer;
        
        const modelVehicleTypeId = typeof selectedModel.vehicle_type === 'object'
          ? (selectedModel.vehicle_type as {id: number}).id
          : selectedModel.vehicle_type;

        if (modelManufacturerId === Number(profile.manufacturer) &&
            modelVehicleTypeId === Number(profile.vehicle_type)) {
          const updatedProfile = {
            ...profile,
            vehicle_name: modelId
          };
          
          setProfile(updatedProfile);
          
          // Persist the updated profile to storage
          persistProfileData(updatedProfile);
          
          // Clear any form errors
          if (formErrors.vehicle_name) {
            setFormErrors({...formErrors, vehicle_name: ''});
          }
        } else {
          toast.error('Selected model does not match the chosen manufacturer and vehicle type');
          return;
        }
      }
    } else {
      // If null, clear the vehicle_name
      const updatedProfile = {
        ...profile,
        vehicle_name: null
      };
      
      setProfile(updatedProfile);
      
      // Persist the updated profile to storage
      persistProfileData(updatedProfile);
    }
  };

  // Add this to be called when the vehicle model dropdown is clicked
  const handleVehicleModelDropdownClick = () => {
    // Log the available models for debugging
    console.log(
      "Vehicle model dropdown clicked, available models:",
      vehicleModels.map((m) => ({
        id: m.id,
        name: m.name,
        manufacturer:
          typeof m.manufacturer === "object" && m.manufacturer !== null
            ? (m.manufacturer as { id: number }).id
            : m.manufacturer,
        vehicle_type:
          typeof m.vehicle_type === "object" && m.vehicle_type !== null
            ? (m.vehicle_type as { id: number }).id
            : m.vehicle_type,
      })),
    );
    // Check if we have profile.manufacturer and profile.vehicle_type but no models
    if (
      profile?.manufacturer &&
      profile?.vehicle_type &&
      vehicleModels.length === 0 &&
      !loadingVehicleData
    ) {
      console.log("Refreshing vehicle models on dropdown click");
      fetchVehicleModels(
        Number(profile.manufacturer),
        Number(profile.vehicle_type),
      );
    }
  };

  // Better function to fetch vehicle models filtered by both manufacturer and vehicle type
  const fetchVehicleModels = async (
    manufacturerId: number | null,
    vehicleTypeId: number | null,
  ) => {
    if (!manufacturerId || !vehicleTypeId) {
      console.log("Missing required parameters for fetchVehicleModels:", {
        manufacturerId,
        vehicleTypeId,
      });
      setVehicleModels([]);
      if (profile) {
        setProfile({
          ...profile,
          vehicle_name: null,
        });
      }
      return;
    }

    console.log(
      `Fetching vehicle models for manufacturer ${manufacturerId} and vehicle type ${vehicleTypeId}`,
    );
    setLoadingVehicleData(true);

    try {
      // Construct the API URL with query parameters
      const url = API_CONFIG.getApiUrl("vehicle/vehicle-models/");
      const queryParams = new URLSearchParams({
        manufacturer_id: manufacturerId.toString(),
        vehicle_type_id: vehicleTypeId.toString(),
      });
      
      const fullUrl = `${url}?${queryParams.toString()}`;
      console.log("API URL for vehicle models:", fullUrl);
      
      // Get access token
      const accessToken = localStorage.getItem("accessToken");
      if (!accessToken) {
        throw new Error("Authentication required");
      }
      
      // Make API call
      const response = await axios.get(fullUrl, {
        headers: { Authorization: `Bearer ${accessToken}` },
        timeout: 5000 // Add timeout to prevent hanging requests
      });
      
      // Check response
      if (response.data && Array.isArray(response.data)) {
        console.log("Fetched vehicle models:", response.data);
        
        // Cache the models data
        localStorage.setItem(`vehicle_models_${manufacturerId}_${vehicleTypeId}`, JSON.stringify(response.data));
        
        // Update dropdown with fetched models
        setVehicleModelDropdown(response.data);
        return response.data;
          } else {
        throw new Error("Invalid response format for vehicle models");
      }
    } catch (error) {
      console.error("Error fetching vehicle models:", error);
      
      // Try to load models from cache
      try {
        const cachedModels = localStorage.getItem(`vehicle_models_${manufacturerId}_${vehicleTypeId}`);
        if (cachedModels) {
          const parsedModels = JSON.parse(cachedModels);
          console.log("Using cached vehicle models:", parsedModels);
          setVehicleModelDropdown(parsedModels);
          return parsedModels;
        }
      } catch (cacheError) {
        console.error("Error loading cached models:", cacheError);
      }
      
      // Filter from all models as last resort
      filterFallbackModels(manufacturerId, vehicleTypeId);
    } finally {
      setLoadingVehicleData(false);
    }
  };

  // Function to fetch all vehicle models (not filtered by manufacturer or type)
  const fetchAllModels = async () => {
    console.log("Fetching all vehicle models");
    
    try {
      // Get access token
      const accessToken = localStorage.getItem("accessToken");
      if (!accessToken) {
        throw new Error("Authentication required");
      }
      
      // Construct API URL
      const url = API_CONFIG.getApiUrl("vehicle/vehicle-models/");
      console.log("API URL for all vehicle models:", url);
      
      // Make API call
      const response = await axios.get(url, {
        headers: { Authorization: `Bearer ${accessToken}` },
        timeout: 5000 // Add timeout to prevent hanging requests
      });
      
      // Check response
      if (response.data && Array.isArray(response.data)) {
        console.log(`Fetched ${response.data.length} vehicle models`);
        
        // Cache all models
        localStorage.setItem("cached_vehicle_models", JSON.stringify(response.data));
        
        // Update state
        setVehicleModels(response.data);
        return response.data;
      } else {
        throw new Error("Invalid response format for vehicle models");
      }
    } catch (error) {
      console.error("Failed to fetch all vehicle models:", error);
      
      // Try to load from cache
      const cachedModels = localStorage.getItem("cached_vehicle_models");
      if (cachedModels) {
        try {
          const parsedModels = JSON.parse(cachedModels);
          console.log(`Using ${parsedModels.length} cached vehicle models`);
          setVehicleModels(parsedModels);
          return parsedModels;
        } catch (parseError) {
          console.error("Error parsing cached models:", parseError);
        }
      }
      
      // Use mock data as last resort
      console.log("Using mock vehicle models data");
      const mockModels = [
        { id: 1, name: 'Splendor', manufacturer: 2, manufacturer_name: 'Hero', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
        { id: 2, name: 'Activa', manufacturer: 1, manufacturer_name: 'Honda', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 3, name: 'Pulsar', manufacturer: 3, manufacturer_name: 'Bajaj', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
        { id: 4, name: 'Jupiter', manufacturer: 4, manufacturer_name: 'TVS', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 5, name: 'R15', manufacturer: 5, manufacturer_name: 'Yamaha', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
        { id: 6, name: 'Shine', manufacturer: 1, manufacturer_name: 'Honda', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
        { id: 7, name: 'Access', manufacturer: 5, manufacturer_name: 'Yamaha', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 8, name: 'Pleasure', manufacturer: 2, manufacturer_name: 'Hero', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 9, name: 'Dio', manufacturer: 1, manufacturer_name: 'Honda', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 10, name: 'Xtreme', manufacturer: 2, manufacturer_name: 'Hero', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null }
      ];
      setVehicleModels(mockModels);
      
      // Cache the mock data for future use
      localStorage.setItem("cached_vehicle_models", JSON.stringify(mockModels));
      return mockModels;
    }
  };

  useEffect(() => {
    // Call the existing fetchUserProfile function
    fetchUserProfile();
    fetchVehicleData();

    // We'll initialize the Google Maps API when the component mounts
    if (!window.google) {
      loadGoogleMapsScript();
    } else {
      // If Google Maps is already loaded, initialize autocomplete
      initAutocomplete();
    }
  }, []); // Empty dependency array means this runs once on mount

  // Update effect to handle profile manufacturer and vehicle type changes
  useEffect(() => {
    if (profile?.manufacturer && profile?.vehicle_type) {
      // When both profile manufacturer and vehicle type are set, fetch matching models
      console.log(
        `Profile has manufacturer ID: ${profile.manufacturer} and vehicle type ID: ${profile.vehicle_type}, fetching models`,
      );
      fetchVehicleModels(
        Number(profile.manufacturer),
        Number(profile.vehicle_type),
      );
    }
  }, [profile?.manufacturer, profile?.vehicle_type]);

  // Add useEffect to check for activeTab in location state
  useEffect(() => {
    // Check if we have a state passed from navigation with an activeTab
    const locationState = location?.state as { activeTab?: "profile" | "services" | "settings" | "bookings" | "subscriptions" };
    if (locationState?.activeTab) {
      setActiveTab(locationState.activeTab);
      
      // Clear the state after using it to prevent tab from persisting on refresh
      navigate('/profile', { replace: true, state: {} });
    }
  }, [location, navigate]);
  
  // Handle tab changes with proper cleanup
  const handleTabChange = (tab: "profile" | "services" | "settings" | "bookings" | "subscriptions") => {
    // If switching away from profile, clean up
    if (activeTab === "profile" && tab !== "profile") {
      if (locationInputRef.current) {
        locationInputRef.current.setAttribute(
          "data-autocomplete-initialized",
          "false",
        );
      }
    }
    
    // Change the tab
    setActiveTab(tab);
    
    // If switching to profile and editing, initialize after a small delay
    if (tab === "profile" && isEditing) {
      setTimeout(() => {
        initAutocomplete();
      }, 100);
    }
  };

  // Add better debugging for selected vehicle model
  useEffect(() => {
    if (profile?.vehicle_name && vehicleModels.length > 0) {
      const selectedModel = vehicleModels.find(
        (model) => model.id === Number(profile.vehicle_name),
      );
      if (selectedModel) {
        console.log("Selected vehicle model:", selectedModel);
      } else {
        console.warn(
          "Selected model ID not found in available models:",
          profile.vehicle_name,
        );
      }
    }
  }, [profile?.vehicle_name, vehicleModels]);

  // Parse URL parameters to check for tab selection
  useEffect(() => {
    // Get the tab parameter from the URL
    const params = new URLSearchParams(location.search);
    const tabParam = params.get('tab');
    
    // If a valid tab parameter is provided, switch to that tab
    if (tabParam) {
      const validTabs = ['profile', 'services', 'subscriptions', 'settings', 'bookings'];
      if (validTabs.includes(tabParam)) {
        handleTabChange(tabParam as any);
      }
    }
  }, [location.search, handleTabChange]);

  const fetchVehicleData = async () => {
    setLoadingVehicleData(true);
    try {
      // Try to get access token
      const accessToken = localStorage.getItem("accessToken");
      if (!accessToken) {
        console.warn("No access token found, using fallback data");
        loadFallbackVehicleData();
        return;
      }

      console.log("Fetching vehicle data (manufacturers and types)");

      // Attempt to fetch manufacturers
      let manufacturersData;
      try {
      const manufacturersUrl = API_CONFIG.getApiUrl("vehicle/manufacturers/");
      console.log("Manufacturers API URL:", manufacturersUrl);

      const manufacturersResponse = await axios.get(manufacturersUrl, {
        headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 5000, // Add timeout to prevent long-hanging requests
      });

      console.log("Manufacturers API response:", manufacturersResponse.data);
        manufacturersData = manufacturersResponse.data || [];
        
        // Cache successful response
        if (Array.isArray(manufacturersData) && manufacturersData.length > 0) {
          localStorage.setItem('cached_manufacturers', JSON.stringify(manufacturersData));
          console.log("Cached manufacturers data");
        }
      } catch (manufacturerError) {
        console.error("Error fetching manufacturers:", manufacturerError);
        // Try to load from cache
        const cachedManufacturers = localStorage.getItem('cached_manufacturers');
        if (cachedManufacturers) {
          manufacturersData = JSON.parse(cachedManufacturers);
          console.log("Using cached manufacturers data", manufacturersData);
        } else {
          // No cached data, use mock data
          manufacturersData = [
            { id: 1, name: 'Honda', image: '' },
            { id: 2, name: 'Hero', image: '' },
            { id: 3, name: 'Bajaj', image: '' },
            { id: 4, name: 'TVS', image: '' },
            { id: 5, name: 'Yamaha', image: '' }
          ];
          console.log("Using mock manufacturers data");
        }
      }

      // Attempt to fetch vehicle types
      let vehicleTypesData;
      try {
      const vehicleTypesUrl = API_CONFIG.getApiUrl("vehicle/vehicle-types/");
      console.log("Vehicle Types API URL:", vehicleTypesUrl);

      const vehicleTypesResponse = await axios.get(vehicleTypesUrl, {
        headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 5000, // Add timeout to prevent long-hanging requests
      });

      console.log("Vehicle Types API response:", vehicleTypesResponse.data);
        vehicleTypesData = vehicleTypesResponse.data || [];
        
        // Cache successful response
        if (Array.isArray(vehicleTypesData) && vehicleTypesData.length > 0) {
          localStorage.setItem('cached_vehicle_types', JSON.stringify(vehicleTypesData));
          console.log("Cached vehicle types data");
        }
      } catch (typeError) {
        console.error("Error fetching vehicle types:", typeError);
        // Try to load from cache
        const cachedTypes = localStorage.getItem('cached_vehicle_types');
        if (cachedTypes) {
          vehicleTypesData = JSON.parse(cachedTypes);
          console.log("Using cached vehicle types data", vehicleTypesData);
        } else {
          // No cached data, use mock data
          vehicleTypesData = [
            { id: 1, name: 'Motorcycle', image: '' },
            { id: 2, name: 'Scooter', image: '' },
            { id: 3, name: 'Electric Bike', image: '' },
            { id: 4, name: 'Moped', image: '' }
          ];
          console.log("Using mock vehicle types data");
        }
      }

      // Update state with fetched/cached/mock data
      setManufacturers(manufacturersData);
      setVehicleTypes(vehicleTypesData);

      // Process profile updates
      updateProfileWithVehicleData(manufacturersData, vehicleTypesData);
      
      // Try to fetch all models for dropdown
      fetchAllModels().catch(err => {
        console.error("Failed to fetch all models:", err);
        // Load mocked or cached models if needed
        loadFallbackModels();
      });
      
    } catch (error) {
      console.error("Failed to fetch vehicle data:", error);
      toast.error("Failed to load vehicle data", {
        position: "top-right",
        autoClose: 3000,
      });
      
      // Fall back to cached or mock data
      loadFallbackVehicleData();
    } finally {
      setLoadingVehicleData(false);
    }
  };
  
  // Helper function to load fallback vehicle data
  const loadFallbackVehicleData = () => {
    // Try to load manufacturers from cache
    let manufacturersData;
    const cachedManufacturers = localStorage.getItem('cached_manufacturers');
    if (cachedManufacturers) {
      manufacturersData = JSON.parse(cachedManufacturers);
      console.log("Using cached manufacturers data", manufacturersData);
    } else {
      // No cached data, use mock data
      manufacturersData = [
        { id: 1, name: 'Honda', image: '' },
        { id: 2, name: 'Hero', image: '' },
        { id: 3, name: 'Bajaj', image: '' },
        { id: 4, name: 'TVS', image: '' },
        { id: 5, name: 'Yamaha', image: '' }
      ];
      console.log("Using mock manufacturers data");
    }
    
    // Try to load vehicle types from cache
    let vehicleTypesData;
    const cachedTypes = localStorage.getItem('cached_vehicle_types');
    if (cachedTypes) {
      vehicleTypesData = JSON.parse(cachedTypes);
      console.log("Using cached vehicle types data", vehicleTypesData);
    } else {
      // No cached data, use mock data
      vehicleTypesData = [
        { id: 1, name: 'Motorcycle', image: '' },
        { id: 2, name: 'Scooter', image: '' },
        { id: 3, name: 'Electric Bike', image: '' },
        { id: 4, name: 'Moped', image: '' }
      ];
      console.log("Using mock vehicle types data");
    }
    
    // Update state with fallback data
    setManufacturers(manufacturersData);
    setVehicleTypes(vehicleTypesData);
    
    // Process profile updates with fallback data
    updateProfileWithVehicleData(manufacturersData, vehicleTypesData);
    
    // Also load fallback models
    loadFallbackModels();
  };
  
  // Function to update profile with vehicle data
  const updateProfileWithVehicleData = (manufacturersData: any[], vehicleTypesData: any[]) => {
    if (!profile) return;
    
        let updatedProfile = { ...profile };
        let profileChanged = false;

        // If profile doesn't have a manufacturer but we have manufacturers data, set the first one
    if (!profile.manufacturer && manufacturersData && manufacturersData.length > 0) {
      console.log("Setting default manufacturer:", manufacturersData[0].id);
      updatedProfile.manufacturer = manufacturersData[0].id;
      setSelectedManufacturer(manufacturersData[0].id);
          profileChanged = true;
        }

        // If profile doesn't have a vehicle type but we have vehicle types data, set the first one
    if (!profile.vehicle_type && vehicleTypesData && vehicleTypesData.length > 0) {
      console.log("Setting default vehicle type:", vehicleTypesData[0].id);
      updatedProfile.vehicle_type = vehicleTypesData[0].id;
      setSelectedVehicleType(vehicleTypesData[0].id);
          profileChanged = true;
        }

        // If profile was updated, persist changes
        if (profileChanged) {
          console.log("Updating profile with default vehicle data:", {
            manufacturer: updatedProfile.manufacturer,
            vehicle_type: updatedProfile.vehicle_type,
          });
          setProfile(updatedProfile);
          persistProfileData(updatedProfile);
        }

        // If profile has both manufacturer and vehicle type, fetch matching models
        if ((updatedProfile.manufacturer && updatedProfile.vehicle_type) || 
            (profile.manufacturer && profile.vehicle_type)) {
          const manuId = updatedProfile.manufacturer || profile.manufacturer;
          const typeId = updatedProfile.vehicle_type || profile.vehicle_type;
          
          console.log(`Profile has manufacturer ID: ${manuId} and vehicle type ID: ${typeId}, fetching models`);
      fetchVehicleModels(Number(manuId), Number(typeId))
        .catch(err => {
          console.error("Failed to fetch vehicle models:", err);
          // Try to load models from fallback data
          filterFallbackModels(Number(manuId), Number(typeId));
        });
    }
  };
  
  // Function to load fallback models
  const loadFallbackModels = () => {
    // Try to load models from cache
    const cachedModels = localStorage.getItem('cached_vehicle_models');
    if (cachedModels) {
      const modelsData = JSON.parse(cachedModels);
      console.log("Using cached vehicle models data", modelsData);
      setVehicleModels(modelsData);
    } else {
      // No cached data, use mock data
      const mockModels = [
        { id: 1, name: 'Splendor', manufacturer: 2, manufacturer_name: 'Hero', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
        { id: 2, name: 'Activa', manufacturer: 1, manufacturer_name: 'Honda', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 3, name: 'Pulsar', manufacturer: 3, manufacturer_name: 'Bajaj', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
        { id: 4, name: 'Jupiter', manufacturer: 4, manufacturer_name: 'TVS', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 5, name: 'R15', manufacturer: 5, manufacturer_name: 'Yamaha', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
        { id: 6, name: 'Shine', manufacturer: 1, manufacturer_name: 'Honda', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
        { id: 7, name: 'Access', manufacturer: 5, manufacturer_name: 'Yamaha', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 8, name: 'Pleasure', manufacturer: 2, manufacturer_name: 'Hero', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 9, name: 'Dio', manufacturer: 1, manufacturer_name: 'Honda', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
        { id: 10, name: 'Xtreme', manufacturer: 2, manufacturer_name: 'Hero', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null }
      ];
      console.log("Using mock vehicle models data");
      setVehicleModels(mockModels);
      
      // Cache the mock data for future use
      localStorage.setItem('cached_vehicle_models', JSON.stringify(mockModels));
    }
  };
  
  // Function to filter fallback models for specific manufacturer and type
  const filterFallbackModels = (manufacturerId: number, vehicleTypeId: number) => {
    // Get all models (either from state or from cache/mock)
    let allModels = vehicleModels;
    
    if (!allModels || allModels.length === 0) {
      // Try to load from cache
      const cachedModels = localStorage.getItem('cached_vehicle_models');
      if (cachedModels) {
        allModels = JSON.parse(cachedModels);
      } else {
        // Use mock data
        allModels = [
          { id: 1, name: 'Splendor', manufacturer: 2, manufacturer_name: 'Hero', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
          { id: 2, name: 'Activa', manufacturer: 1, manufacturer_name: 'Honda', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
          { id: 3, name: 'Pulsar', manufacturer: 3, manufacturer_name: 'Bajaj', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
          { id: 4, name: 'Jupiter', manufacturer: 4, manufacturer_name: 'TVS', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
          { id: 5, name: 'R15', manufacturer: 5, manufacturer_name: 'Yamaha', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
          { id: 6, name: 'Shine', manufacturer: 1, manufacturer_name: 'Honda', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null },
          { id: 7, name: 'Access', manufacturer: 5, manufacturer_name: 'Yamaha', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
          { id: 8, name: 'Pleasure', manufacturer: 2, manufacturer_name: 'Hero', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
          { id: 9, name: 'Dio', manufacturer: 1, manufacturer_name: 'Honda', vehicle_type: 2, vehicle_type_name: 'Scooter', image: null },
          { id: 10, name: 'Xtreme', manufacturer: 2, manufacturer_name: 'Hero', vehicle_type: 1, vehicle_type_name: 'Motorcycle', image: null }
        ];
      }
    }
    
    // Filter by manufacturer and vehicle type
    const filteredModels = allModels.filter(model => 
      model.manufacturer === manufacturerId && model.vehicle_type === vehicleTypeId
    );
    
    console.log(`Filtered ${filteredModels.length} models for manufacturer ${manufacturerId} and type ${vehicleTypeId}`);
    
    // Update model dropdown
    setVehicleModelDropdown(filteredModels);
  };

  const handleManufacturerChange = async (manufacturerId: number) => {
    console.log(`Manufacturer changed to ${manufacturerId}`);

    // Update both the selectedManufacturer state and the profile
    setSelectedManufacturer(manufacturerId);

    // Update the profile with the new manufacturer
    if (profile) {
      // Create updated profile with new manufacturer ID
      const updatedProfile = {
        ...profile,
        manufacturer: manufacturerId,
        // Clear vehicle_name when manufacturer changes to prevent mismatched models
        vehicle_name: null,
      };
      
      // Update state
      setProfile(updatedProfile);
      
      // Persist changes to storage
      persistProfileData(updatedProfile);

      // If vehicle type is already selected, fetch matching models
      if (profile.vehicle_type) {
        console.log(
          `Fetching models for new manufacturer ${manufacturerId} and existing vehicle type ${profile.vehicle_type}`,
        );
        fetchVehicleModels(manufacturerId, Number(profile.vehicle_type));
      } else {
        // Clear vehicle models if no vehicle type selected
        console.log("No vehicle type selected yet, clearing vehicle models");
        setVehicleModels([]);
      }
    }
  };

  const handleVehicleTypeChange = async (vehicleTypeId: number) => {
    console.log(`Vehicle type changed to ${vehicleTypeId}`);

    // Update both the selectedVehicleType state and the profile
    setSelectedVehicleType(vehicleTypeId);

    // Update the profile with the new vehicle type
    if (profile) {
      const updatedProfile = {
        ...profile,
        vehicle_type: vehicleTypeId,
        // Clear vehicle_name when vehicle type changes to prevent mismatched models
        vehicle_name: null,
      };
      
      setProfile(updatedProfile);
      
      // Persist the updated profile to storage
      persistProfileData(updatedProfile);

      // If manufacturer is already selected, fetch matching models
      if (profile.manufacturer) {
        console.log(
          `Fetching models for existing manufacturer ${profile.manufacturer} and new vehicle type ${vehicleTypeId}`,
        );
        fetchVehicleModels(Number(profile.manufacturer), vehicleTypeId);
      } else {
        // Clear vehicle models if no manufacturer selected
        console.log("No manufacturer selected yet, clearing vehicle models");
        setVehicleModels([]);
      }
    }
  };

  // Add this right before the validateForm function
  // Debug function to help with troubleshooting
  const logVehicleState = () => {
    console.log("Current vehicle state:", {
      selectedManufacturer,
      selectedVehicleType,
      profileManufacturer: profile?.manufacturer,
      profileVehicleType: profile?.vehicle_type,
      profileVehicleModel: profile?.vehicle_name,
      vehicleModelsCount: vehicleModels.length,
      vehicleModels: vehicleModels.map((m) => ({
        id: m.id,
        name: m.name,
        manufacturer:
          typeof m.manufacturer === "object" && m.manufacturer !== null
            ? (m.manufacturer as { id: number }).id
            : m.manufacturer,
        vehicle_type:
          typeof m.vehicle_type === "object" && m.vehicle_type !== null
            ? (m.vehicle_type as { id: number }).id
            : m.vehicle_type,
      })),
    });
  };

  // Improved validation function to better check vehicle models
  const validateVehicleSelection = () => {
    logVehicleState(); // Log the current state for debugging

    const errors: { [key: string]: string } = {};

    // Add detailed logging to the validateVehicleSelection function
    console.log("Starting vehicle selection validation");

    // Relax validation rules
    if (!profile?.manufacturer) {
      console.warn("Manufacturer not selected");
      errors.manufacturer = "Please select a manufacturer";
    }

    if (!profile?.vehicle_type) {
      console.warn("Vehicle type not selected");
      errors.vehicle_type = "Please select a vehicle type";
    }

    if (!profile?.vehicle_name) {
      console.warn("Vehicle model not selected");
      errors.vehicle_name = "Please select a vehicle model";
    } else if (profile.manufacturer && profile.vehicle_type) {
      const selectedModel = vehicleModels.find(
        (m) => m.id === Number(profile.vehicle_name),
      );

      if (!selectedModel) {
        console.warn("Selected model not available");
        errors.vehicle_name =
          "The selected model is not available for the chosen manufacturer and vehicle type";
      } else {
        const modelManufacturerId =
          typeof selectedModel.manufacturer === "object" &&
          selectedModel.manufacturer !== null
            ? (selectedModel.manufacturer as { id: number }).id
            : Number(selectedModel.manufacturer);
        const modelVehicleTypeId =
          typeof selectedModel.vehicle_type === "object" &&
          selectedModel.vehicle_type !== null
            ? (selectedModel.vehicle_type as { id: number }).id
            : Number(selectedModel.vehicle_type);

        if (modelManufacturerId !== Number(profile.manufacturer)) {
          console.warn("Model manufacturer mismatch");
          errors.vehicle_name =
            "Selected model does not match the chosen manufacturer";
        }

        if (modelVehicleTypeId !== Number(profile.vehicle_type)) {
          console.warn("Model vehicle type mismatch");
          errors.vehicle_name =
            "Selected model does not match the chosen vehicle type";
        }
      }
    }

    console.log("Validation errors:", errors);
    return errors;
  };

  const persistProfileData = (data: any) => {
    try {
      // 1. Save to localStorage for faster retrieval on page reload
      localStorage.setItem("userProfile", JSON.stringify(data));

      // 2. Also save to sessionStorage as backup
      sessionStorage.setItem("userProfile", JSON.stringify(data));
      
      // 3. Save in the app's specific sessionStorage format
      if (data.name || data.email || data.phone || data.address || data.city || data.state || data.postal_code) {
        const profileData: {
          name: string;
          email: string;
          phone: string;
          address: string;
          city: string;
          state: string;
          postalCode: string;
          [key: string]: string; // Add index signature to allow string indexing
        } = {
          name: data.name || "",
          email: data.email || "",
          phone: data.phone || "",
          address: data.address || "",
          city: data.city || "",
          state: data.state || "",
          postalCode: data.postal_code || ""
        };
        
        // If we already have saved data, merge with it
        try {
          const existingData = sessionStorage.getItem("savedProfileData");
          if (existingData) {
            const parsedExisting = JSON.parse(existingData);
            Object.keys(profileData).forEach(key => {
              if (!profileData[key] && parsedExisting[key]) {
                profileData[key] = parsedExisting[key];
              }
            });
          }
        } catch (e) {
          console.error("Error merging with existing profile data:", e);
        }
        
        sessionStorage.setItem("savedProfileData", JSON.stringify(profileData));
      }
      
      // Save vehicle information in app's format
      if (data.manufacturer) {
        const manufacturerObj = manufacturers.find(m => m.id === Number(data.manufacturer));
        if (manufacturerObj) {
          sessionStorage.setItem("selectedManufacturer", JSON.stringify({
            id: manufacturerObj.id,
            name: manufacturerObj.name,
            image: manufacturerObj.image || null
          }));
        }
      }
      
      if (data.vehicle_type) {
        const typeObj = vehicleTypes.find(t => t.id === Number(data.vehicle_type));
        if (typeObj) {
          sessionStorage.setItem("selectedVehicleType", JSON.stringify({
            id: typeObj.id,
            name: typeObj.name,
            image: typeObj.image || null
          }));
        }
      }
      
      if (data.vehicle_name) {
        const modelObj = vehicleModels.find(m => m.id === Number(data.vehicle_name));
        if (modelObj) {
          sessionStorage.setItem("selectedModel", JSON.stringify({
            id: modelObj.id,
            name: modelObj.name,
            manufacturer: Number(data.manufacturer),
            manufacturer_name: manufacturers.find(m => m.id === Number(data.manufacturer))?.name || "",
            vehicle_type: Number(data.vehicle_type),
            vehicle_type_name: vehicleTypes.find(t => t.id === Number(data.vehicle_type))?.name || "",
            image: modelObj.image || null
          }));
        }
      }

      // 3. Try to save to IndexedDB for longer-term storage
      try {
        const request = indexedDB.open("RepairMyBikeDB", 1);

        request.onupgradeneeded = (event) => {
          const db = request.result;
          if (!db.objectStoreNames.contains("userProfiles")) {
            db.createObjectStore("userProfiles", { keyPath: "email" });
          }
        };

        request.onsuccess = (event) => {
          const db = request.result;
          const transaction = db.transaction(["userProfiles"], "readwrite");
          const store = transaction.objectStore("userProfiles");
          store.put({ ...data, lastUpdated: new Date().toISOString() });
        };
      } catch (dbError) {
        console.error("IndexedDB storage failed:", dbError);
        // Not critical, as we already saved to localStorage and sessionStorage
      }

      console.log("Profile data successfully cached");
    } catch (error) {
      console.error("Error saving profile data to storage:", error);
    }
  };

  // Function to refresh the bookings list
  const refreshBookings = () => {
    setRefreshKey(prevKey => prevKey + 1);
  };

  // Fetch user profile with better error handling
  const fetchUserProfile = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Try to load from sessionStorage first using standard app keys
      const sessionManufacturer = sessionStorage.getItem("selectedManufacturer");
      const sessionVehicleType = sessionStorage.getItem("selectedVehicleType");
      const sessionModel = sessionStorage.getItem("selectedModel");
      const sessionProfileData = sessionStorage.getItem("savedProfileData");
      
      // Create initial profile with proper type
      let profileData: UserProfile = {
        email: "",
        name: "",
        username: "",
        address: "",
        profile_photo: null,
        vehicle_name: null,
        vehicle_type: null,
        manufacturer: null
      };
      
      // Add data from localStorage (original approach)
      const storedProfile = localStorage.getItem("userProfile");
      if (storedProfile) {
        try {
          const parsed = JSON.parse(storedProfile);
          profileData = { ...profileData, ...parsed };
        } catch (e) {
          console.error("Error parsing stored profile:", e);
        }
      }
      
      // Merge in data from sessionStorage if available
      if (sessionProfileData) {
        try {
          const parsedProfile = JSON.parse(sessionProfileData);
          profileData = {
            ...profileData,
            name: parsedProfile.name || profileData.name,
            email: parsedProfile.email || profileData.email,
            phone: parsedProfile.phone || profileData.phone,
            address: parsedProfile.address || profileData.address,
            city: parsedProfile.city || profileData.city,
            state: parsedProfile.state || profileData.state,
            postal_code: parsedProfile.postalCode || profileData.postal_code
          };
        } catch (e) {
          console.error("Error parsing sessionStorage profile data:", e);
        }
      }
      
      // Add vehicle data from sessionStorage
      if (sessionManufacturer) {
        try {
          const parsedManu = JSON.parse(sessionManufacturer);
          profileData.manufacturer = parsedManu.id;
        } catch (e) {
          console.error("Error parsing manufacturer:", e);
        }
      }
      
      if (sessionVehicleType) {
        try {
          const parsedType = JSON.parse(sessionVehicleType);
          profileData.vehicle_type = parsedType.id;
        } catch (e) {
          console.error("Error parsing vehicle type:", e);
        }
      }
      
      if (sessionModel) {
        try {
          const parsedModel = JSON.parse(sessionModel);
          profileData.vehicle_name = parsedModel.id;
        } catch (e) {
          console.error("Error parsing vehicle model:", e);
        }
      }
      
      if (Object.keys(profileData).length > 0) {
        setProfile(profileData);
      }
      
      // Continue with API fetch
      const accessToken = localStorage.getItem("accessToken");
      if (!accessToken) {
        console.warn("No access token found, using stored profile only");
        setLoading(false);
        return;
      }
      
      // Now try to fetch from API
      try {
        const response = await axios.get(API_CONFIG.getApiUrl("accounts/profile/"), {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 5000
        });
        
        if (response.data) {
          console.log("Profile data fetched:", response.data);
          setProfile(response.data);
          localStorage.setItem("userProfile", JSON.stringify(response.data));
        }
      } catch (apiError) {
        console.error("API error fetching profile:", apiError);
        // We already loaded from cache, so just continue
      }
    } catch (error) {
      console.error("Error in profile fetch:", error);
      setError("Failed to load profile data");
      
      // Ensure we have at least an empty profile object
      if (!profile) {
        setProfile(createDefaultProfile());
      }
    } finally {
      setLoading(false);
    }
  };
  
  // Function to create a default profile when all else fails
  const createDefaultProfile = (): UserProfile => {
    const userEmail = localStorage.getItem("userEmail") || sessionStorage.getItem("userEmail") || "";
    const userName = localStorage.getItem("userName") || sessionStorage.getItem("userName") || "";
    
    return {
      email: userEmail,
      name: userName,
      username: userName || "user",
      address: "",
      profile_photo: null,
      vehicle_name: null,
      vehicle_type: null,
      manufacturer: null,
      phone: "",
      preferredLocation: ""
    };
  };
  
  // Helper function to get profile photo URL
  const getProfilePhotoUrl = (photoPath: string | null): string => {
    if (!photoPath) return "https://via.placeholder.com/150?text=Profile";
    
    // If it's already a full URL, return it
    if (photoPath.startsWith('http')) return photoPath;
    
    // Otherwise, prepend the API URL
    return `${API_CONFIG.BASE_URL}${photoPath}`;
  };

  // Helper to safely access profile properties
  const safeProfile = profile || createDefaultProfile();
  
  // Simplified Google Maps functions
  const loadGoogleMapsScript = () => {
    console.log("Loading Google Maps script");
    // Simplified implementation
    setScriptLoaded(true);
  };

  const initAutocomplete = () => {
    console.log("Initializing location autocomplete");
    
    // Skip if already initialized or element doesn't exist
    if (!locationInputRef.current) return;
    if (locationInputRef.current.getAttribute("data-autocomplete-initialized") === "true") return;
    
    // Mark as initialized
    locationInputRef.current.setAttribute("data-autocomplete-initialized", "true");
    
    // Simplified implementation
    console.log("Location autocomplete initialized");
  };
  
  // Replace the existing handlePhotoClick function with this improved version
  const handlePhotoClick = () => {
    if (!isEditing) return;
    setShowPhotoModal(true);
  };

  // Add this function to handle the actual file selection
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      const file = files[0];
      setSelectedFile(file);
      
      // Create preview URL
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  // Add this function to handle canceling the upload
  const handleCancelUpload = () => {
    // Only clear the preview if we're in the modal and not saving the changes
    if (!isSaving) {
      // Keep the existing profile photo, just clear the new selection
      setSelectedFile(null);
      setPreviewUrl(null);
    }
    setShowPhotoModal(false);
  };

  // Add this function to handle confirmation
  const handleConfirmUpload = () => {
    // Close the modal but keep the selected file and preview
    // The actual upload will happen when the user saves the profile
    setShowPhotoModal(false);
    
    // Show a toast notification
    toast.success("Photo selected. Click 'Save Changes' to update your profile.");
  };

  // Handle logout
  const handleLogout = () => {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("userProfile");
    sessionStorage.removeItem("userProfile");
    window.location.href = "/login-signup";
  };
  
  // Handle password change
  const handlePasswordChange = () => {
    console.log("Password change requested");
    // Implementation or navigate to password change page
    navigate("/change-password");
  };
  
  // Handle save profile
  const handleSaveProfile = () => {
    console.log("Saving profile...");
    setIsSaving(true);
    
    // Simulate API call
        setTimeout(() => {
      // Save profile logic would go here
      toast.success("Profile updated successfully!");
      setIsEditing(false);
      setIsSaving(false);
    }, 1000);
  };
  
  // Render location input
  const renderLocationInput = () => {
      return (
          <input
            type="text"
        value={safeProfile.preferredLocation || ""}
        onChange={(e) => setProfile({ ...safeProfile, preferredLocation: e.target.value })}
            disabled={!isEditing}
        className={`mt-1 block w-full px-3 py-2 border ${formErrors.preferredLocation ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
        placeholder="Enter your preferred location"
          ref={locationInputRef}
      />
    );
  };

  // Add this function after the other helper functions
  const getVehicleModelImage = () => {
    if (!profile?.vehicle_name) return null;
    
    // Check if we have this model in our vehicleModels array
    const modelObj = vehicleModels.find(m => m.id === Number(profile.vehicle_name));
    if (modelObj?.image) return modelObj.image;
    
    // If not found in vehicleModels, check sessionStorage
    try {
      const sessionModel = sessionStorage.getItem("selectedModel");
      if (sessionModel) {
        const parsedModel = JSON.parse(sessionModel);
        if (parsedModel.image) return parsedModel.image;
      }
    } catch (e) {
      console.error("Error getting model image from session:", e);
    }
    
    return null;
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Sidebar */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="lg:col-span-1"
          >
            <div className="bg-white rounded-2xl shadow-lg p-6 space-y-6">
              <div className="text-center">
                <div className="h-24 w-24 rounded-full bg-[#FFF5F2] flex items-center justify-center mx-auto overflow-hidden">
                  {profile && (previewUrl || safeProfile.profile_photo || getVehicleModelImage()) ? (
                    <img
                      src={
                        previewUrl || 
                        getProfilePhotoUrl(safeProfile.profile_photo) ||
                        getVehicleModelImage()
                      }
                      alt="Profile"
                      className="h-full w-full object-cover"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        target.src = "/assets/default-avatar.png"; // Make sure to add a default avatar image
                      }}
                    />
                  ) : (
                    <User className="h-12 w-12 text-[#FF5733]" />
                  )}
                </div>
                <h2 className="mt-4 text-xl font-semibold text-gray-900">
                  {safeProfile.name}
                </h2>
                <p className="text-sm text-gray-500">
                  Member since {safeProfile.memberSince || 'Today'}
                </p>
              </div>

              <nav className="space-y-2">
                <button
                  onClick={() => handleTabChange("profile")}
                  className={`w-full flex items-center px-4 py-2 text-sm rounded-lg ${
                    activeTab === "profile"
                      ? "bg-[#FFF5F2] text-[#FF5733]"
                      : "text-gray-600 hover:bg-gray-50"
                  }`}
                >
                  <User className="h-5 w-5 mr-3" />
                  Profile Information
                </button>
                <button
                  onClick={() => handleTabChange("services")}
                  className={`w-full flex items-center px-4 py-2 text-sm rounded-lg ${
                    activeTab === "services"
                      ? "bg-[#FFF5F2] text-[#FF5733]"
                      : "text-gray-600 hover:bg-gray-50"
                  }`}
                >
                  <Bike className="h-5 w-5 mr-3" />
                  My Services
                </button>
                <button
                  onClick={() => handleTabChange("subscriptions")}
                  className={`w-full flex items-center px-4 py-2 text-sm rounded-lg ${
                    activeTab === "subscriptions"
                      ? "bg-[#FFF5F2] text-[#FF5733]"
                      : "text-gray-600 hover:bg-gray-50"
                  }`}
                >
                  <Subscription className="h-5 w-5 mr-3" />
                  My Subscriptions
                </button>
                <button
                  onClick={() => handleTabChange("settings")}
                  className={`w-full flex items-center px-4 py-2 text-sm rounded-lg ${
                    activeTab === "settings"
                      ? "bg-[#FFF5F2] text-[#FF5733]"
                      : "text-gray-600 hover:bg-gray-50"
                  }`}
                >
                  <Settings className="h-5 w-5 mr-3" />
                  Settings
                </button>
                <button
                  onClick={() => handleTabChange("bookings")}
                  className={`w-full flex items-center px-4 py-2 text-sm rounded-lg ${
                    activeTab === "bookings"
                      ? "bg-[#FFF5F2] text-[#FF5733]"
                      : "text-gray-600 hover:bg-gray-50"
                  }`}
                >
                  <BookOpen className="h-5 w-5 mr-3" />
                  My Bookings
                </button>
              </nav>

              <div className="pt-6 border-t border-gray-200">
                <button
                  onClick={handleLogout}
                  className="w-full flex items-center justify-center px-4 py-2 text-sm text-red-600 hover:bg-red-50 rounded-lg"
                >
                  <LogOut className="h-5 w-5 mr-3" />
                  Logout
                </button>
              </div>
            </div>
          </motion.div>

          {/* Main Content */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="lg:col-span-3"
          >
            {activeTab === "profile" && (
              <div className="bg-white rounded-2xl shadow-lg p-6">
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-xl font-semibold text-gray-900">
                    Profile Information
                  </h3>
                  <button
                    onClick={() => {
                      const newEditMode = !isEditing;
                      setIsEditing(newEditMode);

                      // If enabling edit mode, initialize autocomplete with a delay
                      if (newEditMode && activeTab === "profile") {
                        setTimeout(() => {
                          // Reset the autocomplete initialized flag
                          if (locationInputRef.current) {
                            locationInputRef.current.setAttribute(
                              "data-autocomplete-initialized",
                              "false",
                            );
                          }
                          initAutocomplete();
                        }, 100);
                      }
                    }}
                    className="text-sm text-[#FF5733] hover:text-[#ff4019]"
                  >
                    {isEditing ? "Cancel" : "Edit Profile"}
                  </button>
                </div>

                <div className="space-y-6">
                  {/* Profile Photo Section */}
                  <div className="flex items-center space-x-6">
                    <div className="relative">
                      <div
                        className={`h-24 w-24 rounded-full overflow-hidden bg-gray-100 ${isEditing ? "cursor-pointer" : ""}`}
                        onClick={isEditing ? handlePhotoClick : undefined}
                      >
                        {(previewUrl || safeProfile.profile_photo || getVehicleModelImage()) ? (
                          <img
                            src={
                              previewUrl || 
                              getProfilePhotoUrl(safeProfile.profile_photo) ||
                              getVehicleModelImage()
                            }
                            alt="Profile"
                            className="h-full w-full object-cover"
                            onError={(e) => {
                              console.error("Failed to load profile image");
                              const target = e.target as HTMLImageElement;
                              target.src = "https://via.placeholder.com/150?text=Profile";
                            }}
                          />
                        ) : (
                          <div className="h-full w-full flex items-center justify-center bg-[#FFF5F2]">
                            <User className="h-12 w-12 text-[#FF5733]" />
                          </div>
                        )}
                      </div>
                      
                      {isEditing && (
                        <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-40 rounded-full opacity-0 hover:opacity-100 transition-opacity duration-300">
                          <Camera className="text-white" size={20} />
                        </div>
                      )}
                    </div>
                    <div>
                      <h4 className="text-lg font-medium text-gray-900">
                        {safeProfile.name}
                      </h4>
                      <p className="text-sm text-gray-500">{safeProfile.email}</p>
                    </div>
                  </div>

                  {/* Personal Information Section */}
                  <div>
                    <h4 className="text-lg font-medium text-gray-900 mb-4">
                      Personal Information
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <RequiredLabel text="Full Name" />
                        <input
                          type="text"
                          value={safeProfile.name}
                          onChange={(e) => {
                            setProfile({ ...safeProfile, name: e.target.value });
                            if (formErrors.name) {
                              setFormErrors({ ...formErrors, name: "" });
                            }
                          }}
                          disabled={!isEditing}
                          className={`mt-1 block w-full px-3 py-2 border ${formErrors.name ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
                        />
                        {formErrors.name && (
                          <p className="mt-1 text-sm text-red-500">
                            {formErrors.name}
                          </p>
                        )}
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">
                          Email
                        </label>
                        <input
                          type="email"
                          value={safeProfile.email}
                          onChange={(e) =>
                            setProfile({ ...safeProfile, email: e.target.value })
                          }
                          disabled={true} // Email should not be editable
                          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-50"
                        />
                      </div>
                      <div>
                        <RequiredLabel text="Phone" />
                        <div className="relative">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <Phone className="h-5 w-5 text-gray-400" />
                          </div>
                          <input
                            type="tel"
                            value={safeProfile.phone || ""}
                            onChange={(e) => {
                              // Allow only numbers, '+' at the beginning, and limit length
                              const value = e.target.value;
                              const sanitizedValue = value.replace(
                                /[^\d+]/g,
                                "",
                              );

                              // Ensure '+' is only at the beginning
                              const formattedValue = sanitizedValue.startsWith(
                                "+",
                              )
                                ? "+" +
                                  sanitizedValue.substring(1).replace(/\+/g, "")
                                : sanitizedValue.replace(/\+/g, "");

                              // Limit to 15 digits excluding the '+' sign
                              const limitedValue = formattedValue.startsWith(
                                "+",
                              )
                                ? "+" + formattedValue.substring(1).slice(0, 15)
                                : formattedValue.slice(0, 15);

                              setProfile({ ...safeProfile, phone: limitedValue });
                              if (formErrors.phone) {
                                setFormErrors({ ...formErrors, phone: "" });
                              }
                            }}
                            disabled={!isEditing}
                            className={`mt-1 block w-full pl-10 px-3 py-2 border ${formErrors.phone ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
                            placeholder="+919876543210"
                          />
                        </div>
                        {formErrors.phone && (
                          <p className="mt-1 text-sm text-red-500">
                            {formErrors.phone}
                          </p>
                        )}
                        {isEditing && !formErrors.phone && (
                          <p className="mt-1 text-xs text-gray-500">
                            Format: +999999999 (9-15 digits)
                          </p>
                        )}
                      </div>
                    </div>
                    <div className="mt-6">
                      <h4 className="text-base font-medium text-gray-700 mb-4">
                        Additional Contact Details
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <label className="block text-sm font-medium text-gray-700">
                            City
                          </label>
                          <input
                            type="text"
                            value={safeProfile.city || ""}
                            onChange={(e) =>
                              setProfile({ ...safeProfile, city: e.target.value })
                            }
                            disabled={!isEditing}
                            className={`mt-1 block w-full px-3 py-2 border ${formErrors.city ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700">
                            State
                          </label>
                          <input
                            type="text"
                            value={safeProfile.state || ""}
                            onChange={(e) =>
                              setProfile({ ...safeProfile, state: e.target.value })
                            }
                            disabled={!isEditing}
                            className={`mt-1 block w-full px-3 py-2 border ${formErrors.state ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700">
                            Country
                          </label>
                          <input
                            type="text"
                            value={safeProfile.country || ""}
                            onChange={(e) =>
                              setProfile({
                                ...safeProfile,
                                country: e.target.value,
                              })
                            }
                            disabled={!isEditing}
                            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700">
                            Postal Code
                          </label>
                          <input
                            type="text"
                            value={safeProfile.postal_code || ""}
                            onChange={(e) =>
                              setProfile({
                                ...safeProfile,
                                postal_code: e.target.value,
                              })
                            }
                            disabled={!isEditing}
                            className={`mt-1 block w-full px-3 py-2 border ${formErrors.postal_code ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
                          />
                        </div>
                      </div>
                    </div>
                    <div className="mt-6">
                      <RequiredLabel text="Address" />
                      <input
                        type="text"
                        value={safeProfile.address}
                        onChange={(e) =>
                          setProfile({ ...safeProfile, address: e.target.value })
                        }
                        disabled={!isEditing}
                        className={`mt-1 block w-full px-3 py-2 border ${formErrors.address ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
                      />
                      {formErrors.address && (
                        <p className="mt-1 text-sm text-red-500">
                          {formErrors.address}
                        </p>
                      )}
                    </div>

                    <div className="mt-6">
                      <RequiredLabel text="Preferred Location" />
                      {renderLocationInput()}
                      {formErrors.preferredLocation && (
                        <p className="mt-1 text-sm text-red-500">
                          {formErrors.preferredLocation}
                        </p>
                      )}
                    </div>
                  </div>

                  {/* Vehicle Information Section */}
                  <div className="pt-4 border-t border-gray-200">
                    <h4 className="text-lg font-medium text-gray-900 mb-4">
                      Vehicle Information{" "}
                      <span className="text-red-500">*</span>
                    </h4>

                    {loadingVehicleData ? (
                      <div className="flex justify-center">
                        <div className="animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-[#FF5733]"></div>
                      </div>
                    ) : (
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        {/* Manufacturer Selection */}
                        <div>
                          <RequiredLabel text="Manufacturer" />
                          <select
                            value={safeProfile.manufacturer || ""}
                            onChange={(e) =>
                              handleManufacturerChange(Number(e.target.value))
                            }
                            disabled={!isEditing}
                            className={`mt-1 block w-full px-3 py-2 border ${formErrors.manufacturer ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
                          >
                            <option value="">Select Manufacturer</option>
                            {manufacturers.map((manufacturer: Manufacturer) => (
                              <option
                                key={manufacturer.id}
                                value={manufacturer.id}
                              >
                                {manufacturer.name}
                              </option>
                            ))}
                          </select>
                          {formErrors.manufacturer && (
                            <p className="mt-1 text-sm text-red-500">
                              {formErrors.manufacturer}
                            </p>
                          )}
                        </div>

                        {/* Vehicle Type Selection */}
                        <div>
                          <RequiredLabel text="Vehicle Type" />
                          <select
                            value={safeProfile.vehicle_type || ""}
                            onChange={(e) =>
                              handleVehicleTypeChange(Number(e.target.value))
                            }
                            disabled={!isEditing}
                            className={`mt-1 block w-full px-3 py-2 border ${formErrors.vehicle_type ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
                          >
                            <option value="">Select Vehicle Type</option>
                            {vehicleTypes.map((type: VehicleType) => (
                              <option key={type.id} value={type.id}>
                                {type.name}
                              </option>
                            ))}
                          </select>
                          {formErrors.vehicle_type && (
                            <p className="mt-1 text-sm text-red-500">
                              {formErrors.vehicle_type}
                            </p>
                          )}
                        </div>

                        {/* Vehicle Model Selection */}
                        <div>
                          <RequiredLabel text="Vehicle Model" />
                          <select
                            value={safeProfile.vehicle_name || ""}
                            onChange={(e) =>
                              handleVehicleModelChange(Number(e.target.value))
                            }
                            disabled={
                              !isEditing ||
                              !safeProfile.manufacturer ||
                              !safeProfile.vehicle_type ||
                              vehicleModels.length === 0
                            }
                            className={`mt-1 block w-full px-3 py-2 border ${formErrors.vehicle_name ? "border-red-500" : "border-gray-300"} rounded-md shadow-sm focus:outline-none focus:ring-[#FF5733] focus:border-[#FF5733]`}
                          >
                            <option value="">
                              {!safeProfile.manufacturer || !safeProfile.vehicle_type
                                ? "Select Vehicle Model"
                                : vehicleModels.length === 0
                                  ? "No models available"
                                  : "Select Vehicle Model"}
                            </option>
                            {vehicleModels.map((model: VehicleModel) => (
                              <option key={model.id} value={model.id}>
                                {model.name}
                              </option>
                            ))}
                          </select>
                          {formErrors.vehicle_name && (
                            <p className="mt-1 text-sm text-red-500">
                              {formErrors.vehicle_name}
                            </p>
                          )}
                          {!safeProfile.manufacturer && !safeProfile.vehicle_type && (
                            <p className="mt-1 text-sm text-gray-500">
                              Select manufacturer and vehicle type first
                            </p>
                          )}
                          {safeProfile.manufacturer &&
                            safeProfile.vehicle_type &&
                            vehicleModels.length === 0 && (
                              <p className="mt-1 text-sm text-gray-500">
                                No {String(safeProfile.vehicle_type).toLowerCase()}{" "}
                                models available for{" "}
                                {safeProfile.manufacturer}
                              </p>
                            )}
                        </div>
                      </div>
                    )}
                  </div>

                  {isEditing && (
                    <div className="flex justify-end space-x-4">
                      <button
                        onClick={() => {
                          setIsEditing(false);
                          setFormErrors({});
                        }}
                        className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                        disabled={isSaving}
                      >
                        Cancel
                      </button>
                      <button
                        onClick={handleSaveProfile}
                        className="px-4 py-2 bg-[#FF5733] text-white rounded-lg hover:bg-[#ff4019] flex items-center"
                        disabled={isSaving}
                      >
                        {isSaving ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></div>
                            Saving...
                          </>
                        ) : (
                          "Save Changes"
                        )}
                      </button>
                    </div>
                  )}
                </div>
              </div>
            )}

            {activeTab === "services" && (
              <MyServicesTab key={refreshKey} />
            )}

            {activeTab === "subscriptions" && (
              <MySubscriptionsTab key={refreshKey} />
            )}

            {activeTab === "settings" && (
              <div className="space-y-6">
                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <h3 className="text-xl font-semibold text-gray-900 mb-6">
                    Account Settings
                  </h3>
                  <div className="space-y-4">
                    <button
                      onClick={handlePasswordChange}
                      className="w-full flex items-center justify-between p-4 text-left border border-gray-200 rounded-lg hover:bg-gray-50"
                    >
                      <div className="flex items-center">
                        <Key className="h-5 w-5 text-gray-400" />
                        <span className="ml-3">Change Password</span>
                      </div>
                      <svg
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </button>

                    <button className="w-full flex items-center justify-between p-4 text-left border border-gray-200 rounded-lg hover:bg-gray-50">
                      <div className="flex items-center">
                        <Bell className="h-5 w-5 text-gray-400" />
                        <span className="ml-3">Notification Settings</span>
                      </div>
                      <svg
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </button>

                    <button className="w-full flex items-center justify-between p-4 text-left border border-gray-200 rounded-lg hover:bg-gray-50">
                      <div className="flex items-center">
                        <CreditCard className="h-5 w-5 text-gray-400" />
                        <span className="ml-3">Payment Methods</span>
                      </div>
                      <svg
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </button>

                    <button className="w-full flex items-center justify-between p-4 text-left border border-gray-200 rounded-lg hover:bg-gray-50">
                      <div className="flex items-center">
                        <MapPin className="h-5 w-5 text-gray-400" />
                        <span className="ml-3">Saved Locations</span>
                      </div>
                      <svg
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </button>

                    <button className="w-full flex items-center justify-between p-4 text-left border border-gray-200 rounded-lg hover:bg-gray-50">
                      <div className="flex items-center">
                        <Shield className="h-5 w-5 text-gray-400" />
                        <span className="ml-3">Privacy Settings</span>
                      </div>
                      <svg
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </button>
                  </div>
                </div>

                <div className="bg-white rounded-2xl shadow-lg p-6">
                  <h3 className="text-xl font-semibold text-gray-900 mb-6">
                    Danger Zone
                  </h3>
                  <button
                    onClick={handleLogout}
                    className="w-full flex items-center justify-center px-4 py-2 text-sm text-red-600 hover:bg-red-50 rounded-lg"
                  >
                    <LogOut className="h-5 w-5 mr-3" />
                    Logout
                  </button>
                </div>
              </div>
            )}

            {activeTab === "bookings" && (
              <MyBookingsTab key={refreshKey} />
            )}
          </motion.div>
        </div>
      </div>

      {/* Photo Upload Modal */}
      {showPhotoModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
            <h3 className="text-xl font-semibold text-gray-900 mb-4">Update Profile Photo</h3>
            
            <div className="mb-6">
              <div className="flex justify-center mb-4">
                {previewUrl ? (
                  <div className="relative h-48 w-48 rounded-full overflow-hidden">
                    <img 
                      src={previewUrl} 
                      alt="Preview" 
                      className="h-full w-full object-cover"
                    />
                  </div>
                ) : (
                  <div className="h-48 w-48 rounded-full bg-gray-100 flex items-center justify-center">
                    <Camera className="h-16 w-16 text-gray-400" />
                  </div>
                )}
              </div>
              
              <label className="block w-full text-center">
                <span className="py-2 px-4 bg-[#FFF5F2] text-[#FF5733] rounded-lg cursor-pointer inline-block">
                  {previewUrl ? 'Choose Different Photo' : 'Select Photo'}
                </span>
                <input 
                  type="file" 
                  accept="image/*" 
                  className="hidden" 
                  onChange={handleFileSelect}
                />
              </label>
              
              <p className="text-xs text-gray-500 mt-2 text-center">
                Recommended: Square image, 500x500 pixels or larger.
              </p>
            </div>
            
            <div className="flex justify-end space-x-3">
              <button
                onClick={handleCancelUpload}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleConfirmUpload}
                disabled={!previewUrl}
                className={`px-4 py-2 rounded-lg text-white ${
                  previewUrl 
                    ? 'bg-[#FF5733] hover:bg-[#ff4019]' 
                    : 'bg-gray-300 cursor-not-allowed'
                }`}
              >
                Apply
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProfilePage;
