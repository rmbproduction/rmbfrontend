import React, { useState, useEffect } from 'react';
import { Calendar, Check, Clock, ShoppingBag, AlertCircle, X, Info } from 'lucide-react';
import { motion } from 'framer-motion';
import { toast } from 'react-toastify';
import { UserSubscription, VisitSchedule } from '../models/subscription-plan';
import { apiService } from '../services/api.service';

const MySubscriptionsTab: React.FC = () => {
  const [subscriptions, setSubscriptions] = useState<UserSubscription[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [visits, setVisits] = useState<Record<number, VisitSchedule[]>>({});

  // Fetch subscriptions and their visits
  useEffect(() => {
    const fetchSubscriptions = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get user subscriptions
        const userSubscriptions = await apiService.getUserSubscriptions();
        console.log('User subscriptions:', userSubscriptions);
        setSubscriptions(userSubscriptions);
        
        // Fetch visits for each subscription
        const visitsData: Record<number, VisitSchedule[]> = {};
        
        // Fetch visits in parallel
        await Promise.all(
          userSubscriptions.map(async (subscription) => {
            try {
              const subscriptionVisits = await apiService.getSubscriptionVisits(subscription.id);
              visitsData[subscription.id] = subscriptionVisits;
            } catch (visitError) {
              console.error(`Error fetching visits for subscription ${subscription.id}:`, visitError);
              visitsData[subscription.id] = [];
            }
          })
        );
        
        setVisits(visitsData);
      } catch (err) {
        console.error('Error fetching subscriptions:', err);
        setError('Failed to load your subscriptions. Please try again later.');
        toast.error('Failed to load subscriptions');
      } finally {
        setLoading(false);
      }
    };

    fetchSubscriptions();
  }, []);

  // Helper function to format date strings
  const formatDate = (dateString: string): string => {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-IN', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
      });
    } catch (error) {
      return dateString;
    }
  };

  // Get status badge color
  const getStatusColor = (status: string): string => {
    switch (status.toLowerCase()) {
      case 'active':
        return 'bg-green-100 text-green-800';
      case 'expired':
        return 'bg-gray-100 text-gray-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      case 'scheduled':
        return 'bg-blue-100 text-blue-800';
      case 'completed':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Handle subscription cancellation
  const handleCancelSubscription = async (subscriptionId: number) => {
    const confirmed = window.confirm('Are you sure you want to cancel this subscription? This action cannot be undone.');
    if (!confirmed) return;
    
    try {
      await apiService.cancelSubscription(subscriptionId);
      
      // Update the subscription in the UI
      setSubscriptions(prevSubscriptions => 
        prevSubscriptions.map(sub => 
          sub.id === subscriptionId 
            ? { ...sub, status: 'cancelled', is_currently_active: false } 
            : sub
        )
      );
      
      toast.success('Subscription cancelled successfully');
    } catch (error) {
      console.error('Error cancelling subscription:', error);
      toast.error('Failed to cancel subscription');
    }
  };

  // Render "no subscriptions" message
  const renderEmptyState = () => (
    <div className="text-center py-12">
      <div className="bg-gray-50 rounded-full h-20 w-20 flex items-center justify-center mx-auto mb-4">
        <ShoppingBag className="h-10 w-10 text-gray-400" />
      </div>
      <h3 className="text-xl font-medium text-gray-900 mb-2">No Subscriptions Found</h3>
      <p className="text-gray-500 mb-6 max-w-md mx-auto">
        You don't have any active subscription plans yet.
        Check out our subscription plans to enjoy regular bike services at a discounted price.
      </p>
      <a 
        href="/pricing" 
        className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-[#FF5733] hover:bg-[#ff4019]"
      >
        View Subscription Plans
      </a>
    </div>
  );

  // Render loading state
  const renderLoading = () => (
    <div className="flex justify-center items-center py-20">
      <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-[#FF5733]"></div>
    </div>
  );

  // Render error state
  const renderError = () => (
    <div className="text-center py-12">
      <div className="bg-red-50 rounded-full h-20 w-20 flex items-center justify-center mx-auto mb-4">
        <AlertCircle className="h-10 w-10 text-red-500" />
      </div>
      <h3 className="text-xl font-medium text-gray-900 mb-2">Something Went Wrong</h3>
      <p className="text-gray-500 mb-6">{error}</p>
      <button
        onClick={() => window.location.reload()}
        className="inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md text-[#FF5733] bg-[#FFF5F2] hover:bg-[#ffe5e0]"
      >
        Try Again
      </button>
    </div>
  );

  // Render subscription card
  const renderSubscriptionCard = (subscription: UserSubscription) => (
    <motion.div
      key={subscription.id}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className="bg-white rounded-xl shadow-md overflow-hidden mb-6"
    >
      {/* Header */}
      <div className="bg-gradient-to-r from-[#FF5733] to-[#ff4019] p-4 text-white">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-semibold">{subscription.plan_name}</h3>
          <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(subscription.status)}`}>
            {subscription.status}
          </span>
        </div>
        <p className="text-sm opacity-90">{subscription.plan_type} plan</p>
      </div>
      
      {/* Subscription details */}
      <div className="p-4 border-b">
        <div className="grid grid-cols-2 gap-4 mb-4">
          <div>
            <p className="text-sm text-gray-500">Start Date</p>
            <p className="font-medium">{formatDate(subscription.start_date)}</p>
          </div>
          <div>
            <p className="text-sm text-gray-500">End Date</p>
            <p className="font-medium">{formatDate(subscription.end_date)}</p>
          </div>
        </div>
        
        <div className="grid grid-cols-2 gap-4">
          <div>
            <p className="text-sm text-gray-500">Remaining Visits</p>
            <p className="font-medium">{subscription.remaining_visits} visit(s)</p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Remaining Days</p>
            <p className="font-medium">{subscription.remaining_days} day(s)</p>
          </div>
        </div>
        
        {subscription.last_visit_date && (
          <div className="mt-4 pt-4 border-t border-gray-100">
            <p className="text-sm text-gray-500">Last Service Date</p>
            <p className="font-medium">{formatDate(subscription.last_visit_date)}</p>
          </div>
        )}
      </div>
      
      {/* Visits section */}
      <div className="p-4">
        <h4 className="font-medium text-gray-900 mb-3 flex items-center">
          <Calendar className="w-4 h-4 mr-2 text-[#FF5733]" />
          Service Visits
        </h4>
        
        {visits[subscription.id]?.length > 0 ? (
          <div className="space-y-3">
            {visits[subscription.id].map((visit) => (
              <div key={visit.id} className="flex items-center p-3 bg-gray-50 rounded-lg">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-3 ${getStatusColor(visit.status)}`}>
                  {visit.status === 'completed' ? (
                    <Check className="w-4 h-4" />
                  ) : visit.status === 'cancelled' ? (
                    <X className="w-4 h-4" />
                  ) : (
                    <Clock className="w-4 h-4" />
                  )}
                </div>
                <div className="flex-1">
                  <div className="flex justify-between">
                    <p className="font-medium text-gray-900">{formatDate(visit.scheduled_date)}</p>
                    <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(visit.status)}`}>
                      {visit.status_display}
                    </span>
                  </div>
                  {visit.service_notes && (
                    <p className="text-sm text-gray-600 mt-1">{visit.service_notes}</p>
                  )}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-4 bg-gray-50 rounded-lg">
            <p className="text-gray-500 text-sm">No service visits scheduled yet</p>
          </div>
        )}
      </div>
      
      {/* Actions */}
      {subscription.status === 'active' && subscription.is_currently_active && (
        <div className="p-4 bg-gray-50 border-t">
          <div className="flex justify-between items-center">
            <div className="flex items-start">
              <Info className="w-4 h-4 text-blue-500 mr-2 flex-shrink-0 mt-0.5" />
              <p className="text-xs text-gray-600">
                Cancelling this subscription will prevent future service visits, but will not refund any payments.
              </p>
            </div>
            <button
              onClick={() => handleCancelSubscription(subscription.id)}
              className="px-3 py-1 bg-red-100 text-red-700 text-sm rounded hover:bg-red-200 transition-colors"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </motion.div>
  );

  return (
    <div className="bg-white rounded-2xl shadow-lg p-6">
      <div className="flex justify-between items-center mb-6">
        <h3 className="text-xl font-semibold text-gray-900">My Subscriptions</h3>
      </div>
      
      {loading ? (
        renderLoading()
      ) : error ? (
        renderError()
      ) : subscriptions.length === 0 ? (
        renderEmptyState()
      ) : (
        <div>
          {subscriptions.map(renderSubscriptionCard)}
        </div>
      )}
    </div>
  );
};

export default MySubscriptionsTab; 